#!/bin/bash
set +e
source ~/.bashrc
set -eou pipefail

vm_devbox_create_vm() {
    if [[ -e Vagrantfile ]]; then
        return
    fi
    install_version_fedora=42 vagrant_dev_cpus=4 vagrant_dev_memory=8192 vagrant_dev_vm_devbox=1 radia_run vagrant-dev fedora user-1.radia.run
}

vm_devbox_main() {
    cd '/srv/vm_devbox_user-1'
    vm_devbox_create_vm
    vm_devbox_set_forwarded_port
    vm_devbox_set_ssh_config
}

vm_devbox_set_forwarded_port() {
    python <<'EOF_PYTHON'
import re
import subprocess

_FILE = "Vagrantfile"
_FORWARDED_PORT_PREAMBLE = 'config.vm.network "forwarded_port"'
_FORWARDED_PORT_FULL = (
    "{}, guest: 999, host: 999".format(
        _FORWARDED_PORT_PREAMBLE
    )
)
r = False
with open(_FILE) as f:
    c = f.read()
    if _FORWARDED_PORT_PREAMBLE not in c:
        c = re.sub(
            r"^\s*(config\.vm\.hostname.*)$",
            r"\1\n{}".format(_FORWARDED_PORT_FULL),
            c,
            flags=re.MULTILINE,
        )
        r = True
    elif _FORWARDED_PORT_FULL not in c:
        c = re.sub(
            r"^\s*{}.*$".format(_FORWARDED_PORT_PREAMBLE),
            _FORWARDED_PORT_FULL,
            c,
            flags=re.MULTILINE,
        )
        r = True
if r:
    with open(_FILE, 'w') as f:
        f.write(c)
    subprocess.check_call(('vagrant', 'reload'))
EOF_PYTHON
}

vm_devbox_set_ssh_config() {
    if ! vagrant status --machine-readable | grep -q default,state,running; then
        vagrant up
    fi
    vagrant ssh <<'EOF_SSH'
sudo bash <<'EOF_BASH'
set -eou pipefail

_restart_sshd=

_install_stdin() {
    declare tgt=$1
    declare content=$(cat)
    if cmp --silent - "$tgt" <<<"$content"; then
        install --mode=400 --owner=root --group=root /dev/stdin "$tgt" <<<"$content"
        _restart_sshd=1
    fi
}
_install_string /etc/ssh/sshd_config <<'EOF_SSHD_CONFIG'
# DO NOT EDIT THIS FILE
# MANAGED BY RSCONF
# Keep vagrant ssh working and Fedora defaults
Include /etc/ssh/sshd_config.d/*.conf

HostKey /etc/ssh/host_key
ListenAddress 0.0.0.0:999

AuthorizedKeysFile .ssh/authorized_keys

AllowUsers vagrant
PasswordAuthentication no
PermitRootLogin no
Protocol 2
X11Forwarding yes

# For "vagrant ssh" and ssh access from local_ip
ListenAddress 0.0.0.0:22
# Allow passwords just for vagrant from local_ip (ex for sirepo.job_driver.sbatch)
Match User vagrant Address 127.0.0.1
    PasswordAuthentication yes
EOF_SSHD_CONFIG

# authorized_keys has to exist so permissions correct
if ! grep -F --quiet 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIN+rsnN+weGfoIyJhJrPSeXLkZ8fKIMIo72KIaeXqI8M v4.radia.run' '/home/vagrant/.ssh/authorized_keys'; then
    echo 'ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIN+rsnN+weGfoIyJhJrPSeXLkZ8fKIMIo72KIaeXqI8M v4.radia.run' >> '/home/vagrant/.ssh/authorized_keys'
fi

_install_stdin '/etc/ssh/host_key' <<<'-----BEGIN OPENSSH PRIVATE KEY-----
b3BlbnNzaC1rZXktdjEAAAAABG5vbmUAAAAEbm9uZQAAAAAAAAABAAAAMwAAAAtzc2gtZW
QyNTUxOQAAACCDLz8I1qGJLtaocDj86Cfl4bzt+lXYD6mV3l/l8I9htgAAAJBTG3H3Uxtx
9wAAAAtzc2gtZWQyNTUxOQAAACCDLz8I1qGJLtaocDj86Cfl4bzt+lXYD6mV3l/l8I9htg
AAAECchxxZs/Hs2xTbDuUvtJ5wzIQm4W7K03OGYdzzMmR73IMvPwjWoYku1qhwOPzoJ+Xh
vO36VdgPqZXeX+Xwj2G2AAAADHY0LnJhZGlhLnJ1bgE=
-----END OPENSSH PRIVATE KEY-----
'

# SECURITY: dev-mode so ok to delete passwords for root & run user
for u in root vagrant; do
    # hacky but better than updating password every time
    if ! grep -q "^$u::" /etc/shadow; then
        passwd -d "$u"
    fi
done

if [[ $_restart_sshd ]]; then
    sshd -t
    systemctl restart sshd
fi
EOF_BASH
EOF_SSH
}

vm_devbox_main
