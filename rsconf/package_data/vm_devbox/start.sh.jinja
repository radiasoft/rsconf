#!/bin/bash
set -eou pipefail

vm_devbox_create_vm() {
    if [[ -e Vagrantfile ]]; then
        return
    fi
    curl '{{ rsconf_db.installer_url }}' | vagrant_dev_vm_devbox=1 bash -s vagrant-sirepo-dev '{{ this.vm_hostname}}'
}

vm_devbox_main() {
    cd '{{ this.run_d }}'
    vm_devbox_create_vm
    vm_devbox_set_forwarded_port
    vm_devbox_set_ssh_config
}

vm_devbox_set_forwarded_port() {
    python <<'EOF'
import re
import subprocess

_FILE = "Vagrantfile"
_FORWARDED_PORT_PREAMBLE = 'config.vm.network "forwarded_port"'
_FORWARDED_PORT_FULL = (
    "{}, guest: {{ this.ssh_port }}, host: {{ this.ssh_port }}".format(
        _FORWARDED_PORT_PREAMBLE
    )
)
r = False
with open(_FILE) as f:
    c = f.read()
    if _FORWARDED_PORT_PREAMBLE not in c:
        c = re.sub(
            r"^\s*(config\.vm\.hostname.*)$",
            r"\1\n{}".format(_FORWARDED_PORT_FULL),
            c,
            flags=re.MULTILINE,
        )
        r = True
    elif _FORWARDED_PORT_FULL not in c:
        c = re.sub(
            r"^\s*{}.*$".format(_FORWARDED_PORT_PREAMBLE),
            _FORWARDED_PORT_FULL,
            c,
            flags=re.MULTILINE,
        )
        r = True
with open(_FILE, 'w') as f:
    f.write(c)
if r:
    subprocess.check_call(('vagrant', 'reload'))
EOF
}

vm_devbox_set_ssh_config() {
    if ! vagrant status | grep -q running; then
        vagrant up
    fi
    vagrant ssh <<'EOF'
sudo bash -s <<'EOF_BASH'
set -eou pipefail

install --mode=400 --owner=root --group=root /dev/stdin /etc/ssh/sshd_config<<EOF_INSTALL
# DO NOT EDIT THIS FILE
# MANAGED BY RSCONF

# Keep vagrant ssh working
Include /etc/ssh/sshd_config.d/*.conf
ListenAddress 0.0.0.0:22

HostKey {{ this.ssh_guest_host_key_f }}
ListenAddress 0.0.0.0:{{ this.ssh_port }}

AuthorizedKeysFile .ssh/authorized_keys

AllowUsers {{ this.run_u }}
PasswordAuthentication no
PermitRootLogin no
Protocol 2
X11Forwarding yes

# SSH acces from localhost (ex for sirepo.job_driver.sbatch)
ListenAddress {{ this.local_ip }}:22
Match User {{ this.run_u }} Address {{ this.local_ip }}
    PasswordAuthentication yes
EOF_INSTALL

echo '{{ this.ssh_identity_pub_key }}' >> '/home/{{ this.run_u }}/.ssh/authorized_keys'

install --mode=400 --owner=root --group=root /dev/stdin "{{ this.ssh_guest_host_key_f }}"<<EOF_INSTALL
{{ this.ssh_host_key }}
EOF_INSTALL

sshd -t
systemctl restart sshd
EOF_BASH
EOF
}

vm_devbox_main
