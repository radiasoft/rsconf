#!/bin/bash
set +e
source ~/.bashrc
set -eou pipefail

vm_devbox_create_vm() {
    if [[ -e Vagrantfile ]]; then
        return
    fi
    {{ this.installer_cmd }}
}

vm_devbox_main() {
    cd '{{ this.run_d }}'
    vm_devbox_create_vm
    vm_devbox_set_forwarded_port
    vm_devbox_set_ssh_config
}

vm_devbox_set_forwarded_port() {
    python <<'EOF_PYTHON'
import re
import subprocess

_FILE = "Vagrantfile"
_FORWARDED_PORT_PREAMBLE = 'config.vm.network "forwarded_port"'
_FORWARDED_PORT_FULL = (
    "{}, guest: {{ this.ssh_port }}, host: {{ this.ssh_port }}".format(
        _FORWARDED_PORT_PREAMBLE
    )
)
r = False
with open(_FILE) as f:
    c = f.read()
    if _FORWARDED_PORT_PREAMBLE not in c:
        c = re.sub(
            r"^\s*(config\.vm\.hostname.*)$",
            r"\1\n{}".format(_FORWARDED_PORT_FULL),
            c,
            flags=re.MULTILINE,
        )
        r = True
    elif _FORWARDED_PORT_FULL not in c:
        c = re.sub(
            r"^\s*{}.*$".format(_FORWARDED_PORT_PREAMBLE),
            _FORWARDED_PORT_FULL,
            c,
            flags=re.MULTILINE,
        )
        r = True
if r:
    with open(_FILE, 'w') as f:
        f.write(c)
    subprocess.check_call(('vagrant', 'reload'))
EOF_PYTHON
}

vm_devbox_set_ssh_config() {
    if ! vagrant status --machine-readable | grep -q default,state,running; then
        vagrant up
    fi
    vagrant ssh <<'EOF_SSH'
sudo bash <<'EOF_BASH'
set -eou pipefail

# disable systemd-binfmt, because it fails on boot fedora 42
if systemctl list-unit-files systemd-binfmt.service &> /dev/null && [[ $(systemctl is-enabled systemd-binfmt.service) != masked ]]; then
    (
        set +e
        systemctl reset-failed
        systemctl stop systemd-binfmt.service
        systemctl mask systemd-binfmt.service
    )
fi

_restart_sshd=

_install_stdin() {
    declare tgt=$1
    declare content=$(cat)
    if ! cmp --silent - "$tgt" <<<"$content"; then
        install --mode=400 --owner=root --group=root /dev/stdin "$tgt" <<<"$content"
        _restart_sshd=1
    fi
}

_install_stdin /etc/ssh/sshd_config <<'EOF_SSHD_CONFIG'
# DO NOT EDIT THIS FILE
# MANAGED BY RSCONF
# Keep vagrant ssh working and Fedora defaults
Include /etc/ssh/sshd_config.d/*.conf

HostKey {{ this.ssh_guest_host_key_f }}
ListenAddress 0.0.0.0:{{ this.ssh_port }}

AuthorizedKeysFile .ssh/authorized_keys

AllowUsers {{ this.run_u }}
PasswordAuthentication no
PermitRootLogin no
Protocol 2
X11Forwarding yes

# For "vagrant ssh" and ssh access from local_ip
ListenAddress 0.0.0.0:22
# Allow passwords just for vagrant from local_ip (ex for sirepo.job_driver.sbatch)
Match User {{ this.run_u }} Address {{ this.local_ip }}
    PasswordAuthentication yes
EOF_SSHD_CONFIG

# authorized_keys has to exist so permissions correct
if ! grep -F --quiet '{{ this.ssh_identity_pub_key }}' '{{ this.ssh_guest_authorized_keys_f }}'; then
    echo '{{ this.ssh_identity_pub_key }}' >> '{{ this.ssh_guest_authorized_keys_f }}'
fi

_install_stdin '{{ this.ssh_guest_host_key_f }}' <<<'{{ this.ssh_host_key }}'

# SECURITY: dev-mode so ok to delete passwords for root & run user
for u in {{ this.root_u }} {{ this.run_u }}; do
    # hacky but better than updating password every time
    if ! grep -q "^$u::" /etc/shadow; then
        passwd -d "$u"
    fi
done

if [[ $_restart_sshd ]]; then
    sshd -t
    systemctl restart sshd
fi
EOF_BASH
EOF_SSH
}

vm_devbox_main
