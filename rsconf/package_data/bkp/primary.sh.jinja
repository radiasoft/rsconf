#!/bin/bash
set -euo pipefail

{{ bkp.global_vars }}

primary_archive_logs() {
    local mirror_d=$1
    local host=$(basename "$mirror_d")
    local src year dst
    # so that \b works
    local date_re='\b(20[0-9][0-9])[0-9]{4}'
    #POSIT: $bkp_log_dirs has globs so don't quote
    for src in $(shopt -s nullglob && cd "$mirror_d" && find ${bkp_log_dirs[@]} -type f -name '*20[0-9][0-9]*'); do
        if [[ ! $src =~ $date_re ]]; then
            continue
        fi
        year=${BASH_REMATCH[1]}
        dst="$bkp_archive_d/logs/$year/$host/$src"
        if [[ -e $dst ]]; then
            continue
        fi
        mkdir -m 700 -p "$(dirname "$dst")"
        install -p -m 400 -o root -g root "$mirror_d/$src" "$dst"
    done
}

primary_host() {
    local host=$1
    local out src_d try cmd
    local tgt_d=$bkp_mirror_d/$primary_curr/$host
    mkdir -m 700 -p "$tgt_d"
    primary_log "$host: primary copy"
    local cmd=( primary_rsync )
    local d=$bkp_mirror_d/$primary_prev/$host
    if [[ $primary_prev && -d $d ]]; then
        cmd+=( --link-dest="$d" )
    fi
    local -a e=()
    for src_d in "${bkp_include[@]}"; do
        e=( "${bkp_exclude[@]}" ${bkp_exclude_for_host[$host]:-} )
        "${cmd[@]}" "${e[@]}" "$host:$src_d" "$tgt_d"
    done
    primary_archive_logs "$tgt_d"
}

primary_log() {
    # Don't need timestamps, journalctl takes care of that
    echo "$@"
}

primary_main() {
    primary_log "$(hostname -f ): begin primary"
    local primary_curr=$(date +%Y%m%d%H%M%S)
    # Only accept a completed backup, that is, "current" must
    # have been written by primary_set_current after backup was complete
    local primary_prev=$(readlink "$bkp_mirror_d"/current || true)
{{ bkp.host_cmds }}
    primary_set_current
{{ bkp.secondary_cmds }}
{{ bkp.simple_mirror_cmds }}
    primary_log "$(hostname -f ): end primary"
}

primary_simple_mirror() {
    local host_src_d=$1
    local tgt_d=$2
    primary_log "$host_src_d: simple_mirror: $tgt_d"
    primary_rsync "$host_src_d" "$tgt_d"
}

primary_rsync() {
    local args=( "$@" )
    local cmd=(
        rsync
        --archive
        --delete
        # https://gist.github.com/KartikTalwar/4393116
        # rsync (Everyone seems to like -z [--compress], but it is much slower for me)
        # --compress
        # https://possiblelossofprecision.net/?p=2255
        -e 'ssh -x -T -o Compression=no -c aes128-ctr'
        --hard-links
        --links
        --numeric-ids
        --one-file-system
        --no-devices
        --no-specials
        --relative
        --sparse
        --timeout=14400
        # https://serverfault.com/a/386658
        # hash of delta is taking a long time
        --whole-file
        # we don't use these:
        # --acls
        # --xattrs
        "${args[@]}"
    )
    local out try
    for try in $(seq 1 "$bkp_max_try"); do
        # We don't care about missing top level directories:
        # rsync: link_stat "/foo" failed: No such file or directory
        # This is a duplicate error due to the above
        # rsync error: some files/attrs were not transferred
        out=$(
            "${cmd[@]}" 2>&1 |
            grep -E -v -i "${args[-2]}\".*no such file|some files.*not transfer|skipping non-regular file" || true
        )
        if [[ ! $out ]]; then
            return
        fi
        if [[ ! $out =~ ssh_exchange_identification ]] ||
            (( $try >= $bkp_max_try ))
        then
            primary_log "${cmd[*]}: FAILED: $out"
            return
        fi
        # Probably due to an ssh rate limiter in iptables so
        # let's just try in a little while and backoff linearly.
        sleep $(( 60 * $try ))
    done
}

primary_secondary() {
    local secondary=$1
    local src_d
    primary_log "$secondary: secondary begin"
    for src_d in "$bkp_mirror_d"/current/*.*; do
        primary_log "$(basename $src_d): secondary copy"
        # Over the WAN so run compression at rsync level
        primary_rsync --compress "$src_d" "$secondary:/"
    done
    primary_log "$secondary: secondary end"
}

primary_set_current() {
    primary_log "$bkp_mirror_d/$primary_curr: set_current"
    rm -f "$bkp_mirror_d/current"
    ln -s "$primary_curr" "$bkp_mirror_d/current"
}

primary_main "$@"
