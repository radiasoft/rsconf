#!/bin/bash

rs_mariadb_init() {
    #NOTE: $db should be a non-conflicting name so we can avoid using
    #   mysql backticks for quoting (create database `$db`), which results
    # in: "wp1: command not found" because of the EOF (here) doc.
    local db=$1
    local user=$2
    local pw=$3
    docker exec -i {{ systemd.service_name }} bash <<EOF
set -euo pipefail
export MYSQL_PWD='{{ rs_mariadb.root_password }}'
if mysql -h '{{ rs_mariadb.ip }}' -P '{{ rs_mariadb.port }}' -u root -e 'use $db';
 then
    exit
fi
mysql -h '{{ rs_mariadb.ip }}' -P '{{ rs_mariadb.port }}' -u root <<'EOF2'
CREATE DATABASE $db;
GRANT ALL PRIVILEGES ON $db.* TO '$user'@'%' IDENTIFIED BY '$pw';
FLUSH PRIVILEGES;
EOF2
EOF
}

rs_mariadb_main() {
    # if this directory exists, then db was initialized
    if [[ -e  {{ rs_mariadb.db_d }}/mysql ]]; then
        return
    fi

    {{ systemd.start }} /bin/bash <<'EOF'
    set -euo pipefail
    # cross-bootstrap avoids referring to a host name, which inside a docker
    # container is irrelevant. mysql_install_db is a complex beast so we'll
    # run it, but it's probaby only one line of code that needs to be run. The
    # rest are checks that are irrelevant to us. It has to run as root.
    mysql_install_db --cross-bootstrap --datadir='{{ rs_mariadb.db_d }}'
EOF
    # Now intitialize the database, removing the "test" db and any users
    # which were created by mysql_install_db.
    {{ systemd.start }} /bin/bash <<'EOF'
    set -euo pipefail
    init_log='{{ rs_mariadb.run_d }}/db_init.log'
    {{ systemd.docker_exec }} --init-file=/dev/stdin <<'EOF2' >& "$init_log" &
        DELETE FROM mysql.user;
        CREATE USER 'root'@'%' IDENTIFIED BY '{{ rs_mariadb.root_password }}';
        GRANT ALL ON *.* TO 'root'@'%' WITH GRANT OPTION;
        DROP DATABASE IF EXISTS test;
        FLUSH PRIVILEGES;
EOF2
    # fastest path to stopping server after it processes init-file and starts
    # serving. You can't exit from the init-file, and you can't use
    # https://mariadb.com/kb/en/library/mysql_secure_installation/
    # b/c it requires sudo
    pid=$!
    for x in $(seq 10); do
        sleep 1
        if grep 'ready for connections' "$init_log" >& /dev/null; then
            break
        fi
    done
    # Normal termination
    kill -TERM "$pid"
    for x in $(seq 10); do
        sleep 1
        if ! kill -0 "$pid" >& /dev/null; then
            exit 0
        fi
    done
    kill -KILL "$pid"
    exit 1
EOF
}
