#!/bin/bash
_docker_pkg=docker-ce

docker_install() {
    if [[ -e /var/lib/docker ]]; then
        # This will happen on dev systems only, but a good check nonetheless
        install_err '/var/lib/docker exists. You need to:
systemctl stop docker
systemctl disable docker
rm -rf /var/lib/docker/*
umount /var/lib/docker
rmdir /var/lib/docker
perl -pi -e "s{^/var/lib/docker.*}{}" /etc/fstab
lvremove -f /dev/mapper/docker-vps

Then re-run rsconf. This should only happen in development environments.
'
    fi
    if rsconf_fedora_release_if 26; then
        # https://docs.docker.com/engine/installation/linux/docker-ce/fedora/#set-up-the-repository
        dnf -y install dnf-plugins-core
        dnf config-manager \
            --add-repo \
            https://download.docker.com/linux/fedora/"$_docker_pkg".repo
    else
        yum-config-manager \
            --add-repo https://download.docker.com/linux/centos/"$_docker_pkg".repo
        yum makecache fast
        # yum-plugin-ovl required for overlay2 on centos7
        # https://github.com/docker-library/official-images/issues/1291
        rsconf_yum_install yum-plugin-ovl
    fi
    rsconf_yum_install "$_docker_pkg"
    {% if rsconf_db.channel == "dev" %}
        # Give vagrant user access in dev mode only
        usermod -aG docker vagrant
    {% endif %}
}

docker_main() {
    declare d={{ docker.data_d }}/volumes
    if [[ -e $d ]] && type docker >& /dev/null; then
        if docker_need_update; then
            # Need to specify cli explicitly or it won't update
            install_yum update "$_docker_pkg" "$_docker_pkg"-cli
        else
            install_info "$d: exists, docker already installed"
        fi
    else
        docker_install
    fi
    if docker_need_update; then
        install_err "Installed docker=$(docker_version) is < min_software_version={{ docker.min_software_version }} after install."
    fi
}

docker_need_update() {
    local v=$(docker_version)
    if [[ ! $v ]]; then
        install_err "docker --version did not output a valid version number"
    fi
    (( $(docker_version_num "$v" ) < $(docker_version_num '{{ docker.min_software_version }}') ))
}

docker_version() {
    if [[ $(docker --version) =~ ([0-9]+\.[0-9]+\.[0-9]+) ]]; then
        echo "${BASH_REMATCH[1]}"
    fi
}

docker_version_num() {
    declare dotted=$1
    printf '%d%06d%06d' ${dotted//./ }
}
